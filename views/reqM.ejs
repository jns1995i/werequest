<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>REGISTRAR</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/color.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <link rel="stylesheet" href="/user.css">
    <link rel="icon" href="/images/logo.png">
    <style>
        .horizon {
            display: flex;
            overflow-x: auto;
            white-space: nowrap;
            gap: 20px;
            padding: 15px 0;
            justify-content: start;
            scroll-snap-type: x mandatory;
            border: 1px solid rgba(255, 255, 255, 0);
            border-radius: 10px;
        }
        .horCard {
            flex: 0 0 auto;
            padding: 20px;
            width: 23%;
        }
        .details {
            max-height: 0;
            overflow: hidden;
            opacity: 0;
            transition: max-height 0.6s ease-in-out, opacity 0.8s ease-in-out, padding 0.4s ease-in-out;
            white-space: pre-line;
        }

        .details.show {
            max-height: fit-content;
            opacity: 1;
            padding: 10px 0;
        }

        .newsCard {
            transition: all 0.8s ease-in-out;
        }
        #assignDepCard {
            max-width: 0;
            max-height: 0;
            opacity: 0;
            overflow: hidden;
            position: absolute;
            z-index: 100;
        }
        #assignDepCard.active {
            max-width: 100%;
            max-height: 100%;
            opacity: 1;
            padding: 0;
            position: absolute;
            z-index: 100;
        }
        .unseen {
            max-height: 0;
            opacity: 0;
            overflow: hidden;
            transition: max-height 0.9s ease, opacity 0.6s ease;
            position: absolute;
        }
        .seen2 {
            max-height: 400px;
            opacity: 1;
            padding: 0;
            transition: max-height 0.1s ease, opacity 0.6s ease;
            position: absolute;
        }
        textarea {
            background-color: white;
        }
        .headf {
            border: none;
        }
        #statLabel {
            position: absolute;
            right: 15px;
            top: 15px;
            background-color: transparent;
            padding: 5px;
            border: 0.5px solid gray;
        }

@media screen and (max-width: 1025px) {
    .mobile {
        display: none;
    }
    .responsive {
        display: none;
    }
    body {
        padding: 0;
        height: 100%;
    }
    #MainFrame {
        flex-direction: column;
        overflow-y: auto;
        padding: 5px;
        display: block;
    }
    #VideoFrame {
        position: initial;
        width: 100%;
        height: auto !important;
        flex-direction: row !important;
        box-shadow: none;
    }
    #VideoFrame2 {
        flex-direction: row-reverse;
    }
    #leftVideo {
        width: 50% !important;
    }
    #rightVideo {
        width: 50% !important;
    }
    .annCrd {
        width: 100% !important;
    }
    #annFrame {
        padding-inline: 5% !important;
        height: auto !important;
        overflow-y: hidden;
    }
    #headFrame {
        flex-direction: column-reverse !important;
        height: auto !important;
        gap: 5px;
        margin-bottom: 5px;
    }
    #navFrame {
        display: none;
    }
    #navFrame2 {
        display: flex;
        bottom: 0;
        left: 0;
        width: 100%;
        height: auto !important;
        z-index: 600;
    background: 
        radial-gradient(circle at 10% 5%, var(--shade15), transparent 25%),  /* Light Gray */
        radial-gradient(circle at 80% 95%,  var(--green2), transparent 30%),  /* Very Light Blue */
        radial-gradient(circle at 50% 50%,  var(--green3), transparent 80%); /* White */
    background-blend-mode: lighten;
    backdrop-filter: blur(10px);
    background-color: var(--shade10);
        justify-content: space-between;
        padding: 10px;
        color: white !important;
    }
    #navFrame2 p {
        color: white;
    }
    #titleText {
        font-size: 18px;
    }
    .EmerText {
        display: flex;
    }
}
    </style>
<body class="block relative">
    
            <div class="width100 block overflow-y1 relative" style="padding-inline: 20%;">
                                
                <div class="height0 paddingInline10 justifyStart gap20">
                    <a href="/reqAll" class="nav"><i class="fas fa-arrow-left"></i></a>
                    <p class="size28 str500 colorPrimary">New Request</p>
                </div>
                <br>
                <form action="/reqDocument" method="POST" enctype="application/x-www-form-urlencoded" class="height0 padding10 bgWhite relative borderRadius10 width100">

                    <div class="fieldsetContainer height0 padding5 width0 col" id="fieldsetContainer">
                        <fieldset class="marginBottom20 border0 borderGreen padding5">
                            <div class="justifyBetween marginBottom5" id="removeBtnContainer2">
                                <p class="size20 str400 width0 padding5"><i class="fas fa-file-alt size16"></i> Document</p>
                                <button type="button" class="remove-btn nav fnav width0 border0 size12 dnav">Remove</button>
                            </div>
                            
                            <div class="col gap10 bgWhite borderRadius10 padding10">
                                <div class="field">
                                    <label>Type</label>
                                    <div class="selectBar">
                                        <select name="type[]" required class="docType">
                                            <option value="" selected disabled>Select</option>
                                            <option value="Barangay Clearance">Barangay Clearance</option>
                                            <option value="Barangay Indigency">Barangay Indigency</option>
                                            <option value="Good Moral">Good Moral</option>
                                            <option value="Certificate of Residency">Certificate of Residency</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="field">
                                    <label>Purpose</label>
                                    <div class="selectBar">
                                        <select name="purpose[]" required>
                                            <option value="ANY LEGAL">ANY LEGAL</option>
                                            <option value="BURIAL ASSISTANCE">BURIAL ASSISTANCE</option>
                                            <option value="EDUCATIONAL ASSISTANCE">EDUCATIONAL ASSISTANCE</option>
                                            <option value="FINANCIAL ASSISTANCE">FINANCIAL ASSISTANCE</option>
                                            <option value="MEDICAL ASSISTANCE">MEDICAL ASSISTANCE</option>
                                            <option value="BANK TRANSACTION">BANK TRANSACTION</option>
                                            <option value="BOARD EXAM">BOARD EXAM</option>
                                            <option value="CELCOR/ELECTRIC METER">CELCOR/ELECTRIC METER</option>
                                            <option value="LCR">LCR</option>
                                            <option value="LEGALIZATION">LEGALIZATION</option>
                                            <option value="LOCAL EMPLOYMENT">LOCAL EMPLOYMENT</option>
                                            <option value="PHILHEALTH">PHILHEALTH</option>
                                            <option value="POLICE CLEARANCE">POLICE CLEARANCE</option>
                                            <option value="PRIME WATER">PRIME WATER</option>
                                            <option value="SCHOOL REQUIREMENT">SCHOOL REQUIREMENT</option>
                                            <option value="SENIOR CITIZEN">SENIOR CITIZEN</option>
                                            <option value="SOLO PARENT PWD">SOLO PARENT PWD</option>
                                            <option value="TRAVEL ABROAD">TRAVEL ABROAD</option>
                                            <option value="XXX">XXX</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="field">
                                    <label>No. Copies</label>
                                    <div class="selectBar">
                                        <select name="qty[]" required>
                                            <option value="" selected disabled>Select</option>
                                            <option value="1">1</option>
                                            <option value="2">2</option>
                                            <option value="3">3</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="height0 col alignStart hidden" id="purposeCard">
                                <label for="">Remarks: Indicate here the content (Optional)</label>
                                <textarea placeholder="e.g. This is to certify that Juan dela Cruz is a solo parent." name="remarks[]"></textarea>
                            </div>                        
                        </fieldset>

                    <script>
                    document.addEventListener("DOMContentLoaded", function () {
                        const addBtn = document.getElementById("addBtn");
                        const fieldsetContainer = document.getElementById("fieldsetContainer");
                        const messageDiv = document.getElementById("formMessage");
                        const limitMessageDiv = document.getElementById("limitM");

                        const defaultPurposes = [
                            "ANY LEGAL","BURIAL ASSISTANCE","EDUCATIONAL ASSISTANCE","FINANCIAL ASSISTANCE",
                            "MEDICAL ASSISTANCE","BANK TRANSACTION","BOARD EXAM","CELCOR/ELECTRIC METER",
                            "LCR","LEGALIZATION","LOAN","LOCAL EMPLOYMENT","PHILHEALTH","POLICE CLEARANCE",
                            "PRIME WATER","SCHOOL REQUIREMENT","SENIOR CITIZEN","SOLO PARENT PWD","TRAVEL ABROAD"
                        ];

                        const indigencyPurposes = [
                            "ANY LEGAL","BURIAL ASSISTANCE","EDUCATIONAL ASSISTANCE","FINANCIAL ASSISTANCE",
                            "MEDICAL ASSISTANCE","PHILHEALTH","SCHOOL REQUIREMENT"
                        ];

                        // ------------------------------
                        // Function to update purpose options per fieldset
                        function updatePurposeOptions(fieldset) {
                            const docTypeSelect = fieldset.querySelector(".docType");
                            const purposeSelect = fieldset.querySelector("select[name='purpose[]']");
                            if (!docTypeSelect || !purposeSelect) return;

                            const selectedType = docTypeSelect.value;
                            purposeSelect.innerHTML = ""; // Clear existing options

                            let purposes = defaultPurposes;
                            if (selectedType === "Good Moral" || selectedType === "Certification") {
                                purposes = ["ANY LEGAL"];
                            } else if (selectedType === "Barangay Indigency") {
                                purposes = indigencyPurposes;
                            }

                            // Default "Select" option
                            const defaultOption = document.createElement("option");
                            defaultOption.value = "";
                            defaultOption.textContent = "Select";
                            defaultOption.disabled = true;
                            defaultOption.selected = true;
                            purposeSelect.appendChild(defaultOption);

                            purposes.forEach(purpose => {
                                const option = document.createElement("option");
                                option.value = purpose;
                                option.textContent = purpose;
                                purposeSelect.appendChild(option);
                            });
                        }

                        // ------------------------------
                        // Show/hide purposeCard and ensure remarks visibility
                        function togglePurposeCard(selectElement) {
                            const fieldset = selectElement.closest("fieldset");
                            const purposeCard = fieldset.querySelector(".purposeCard");
                            const remarksField = fieldset.querySelector(".remarks");

                            if (selectElement.value === "Certification") {
                                purposeCard?.classList.remove("unseen");
                                purposeCard?.classList.add("seen2");
                            } else {
                                purposeCard?.classList.remove("seen2");
                                purposeCard?.classList.add("unseen");
                            }

                            if (remarksField) {
                                remarksField.parentElement.classList.remove("unseen");
                            }
                        }

                        // ------------------------------
                        // Validate required fields in a fieldset
                        function isFieldsetValid(fieldset) {
                            const requiredFields = fieldset.querySelectorAll("select[required], input[required], textarea[required]");
                            return Array.from(requiredFields).every(field => field.value.trim() !== "");
                        }

                        // Enable/disable Add button depending on last fieldset
                        function checkLastFieldsetBeforeAdding() {
                            const fieldsets = fieldsetContainer.querySelectorAll("fieldset");
                            const lastFieldset = fieldsets[fieldsets.length - 1];

                            if (isFieldsetValid(lastFieldset)) {
                                addBtn.removeAttribute("disabled");
                                messageDiv.style.display = "none";
                            } else {
                                addBtn.setAttribute("disabled", "true");
                            }
                        }

                        // Check fieldset limit
                        function checkFieldsetCount() {
                            const fieldsets = fieldsetContainer.querySelectorAll("fieldset");

                            if (fieldsets.length >= 5) {
                                addBtn.style.display = "none";
                                limitMessageDiv?.classList.remove("hidden");
                            } else {
                                addBtn.style.display = "inline-block";
                                limitMessageDiv?.classList.add("hidden");
                            }
                        }

                        // Attach event listeners to a fieldset (existing or cloned)
                        function attachFieldsetListeners(fieldset) {
                            const docTypeSelect = fieldset.querySelector(".docType");
                            if (docTypeSelect) {
                                docTypeSelect.addEventListener("change", function () {
                                    togglePurposeCard(this);
                                    updatePurposeOptions(fieldset);
                                });
                                updatePurposeOptions(fieldset); // initialize purposes on load
                            }

                            const removeBtn = fieldset.querySelector(".remove-btn");
                            if (removeBtn) {
                                removeBtn.style.display = "flex";
                                removeBtn.addEventListener("click", function () {
                                    fieldset.remove();
                                    checkFieldsetCount();
                                    checkLastFieldsetBeforeAdding();
                                });
                            }

                            // Ensure remarks fields are visible
                            fieldset.querySelectorAll(".remarks").forEach(el => el.parentElement.classList.remove("unseen"));
                        }

                        // ------------------------------
                        // Initialize existing fieldsets
                        document.querySelectorAll("#fieldsetContainer fieldset").forEach(attachFieldsetListeners);

                        // ------------------------------
                        // Add new fieldset
                        addBtn.addEventListener("click", function (e) {
                            e.preventDefault();

                            const fieldsets = fieldsetContainer.querySelectorAll("fieldset");
                            const lastFieldset = fieldsets[fieldsets.length - 1];

                            // Hide previous message
                            messageDiv.style.display = "none";

                            if (!isFieldsetValid(lastFieldset)) {
                                messageDiv.innerHTML = `<i class="fas fa-exclamation-circle marginLeft5"></i> &nbsp; Please fill in all required fields before adding a new document!`;
                                messageDiv.style.display = "flex";
                                messageDiv.style.padding = "10px";
                                messageDiv.style.marginBottom = "10px";
                                messageDiv.style.border = "0.5px solid red";
                                return;
                            }

                            // Clone first fieldset as template
                            const firstFieldset = document.querySelector("#fieldsetContainer fieldset");
                            if (!firstFieldset) return;

                            const newFieldset = firstFieldset.cloneNode(true);

                            // Clear cloned inputs
                            newFieldset.querySelectorAll("select, input, textarea").forEach(el => {
                                if (el.tagName === "SELECT") el.selectedIndex = 0;
                                else el.value = "";
                            });

                            // Ensure remarks field visible
                            const remarksField = newFieldset.querySelector(".remarks");
                            if (remarksField) remarksField.parentElement.classList.remove("unseen");

                            attachFieldsetListeners(newFieldset); // Attach all listeners
                            fieldsetContainer.appendChild(newFieldset);

                            checkFieldsetCount();
                            checkLastFieldsetBeforeAdding();
                        });

                        // Hide remove button for first fieldset
                        const firstRemoveBtn = document.querySelector("#fieldsetContainer fieldset .remove-btn");
                        if (firstRemoveBtn) firstRemoveBtn.style.display = "none";

                        // Monitor input changes
                        fieldsetContainer.addEventListener("input", checkLastFieldsetBeforeAdding);

                        // Initial check
                        checkFieldsetCount();
                        checkLastFieldsetBeforeAdding();
                    });
                    </script>
        
                                    
                    </div>

                    <div id="formMessage" class="form-message height0 size12 colorPrimary justifyCenter borderRadius10" style="background-color: rgb(255, 228, 228); color: rgb(80, 0, 0);"></div>

                    <div id="limitM" class="limitM marginBottom5 height0 size12 colorPrimary justifyCenter borderRadius10 borderPrimary" style="background-color: rgba(246, 255, 247, 0.87);">
                        <div class="height0 padding10 size14 str500"> You can only request not more than a five (5) items</div>
                    </div>
                        
                    <div class="paddingInline5 height0">
                        <div class="height0 justifyBetween padding10 borderRadius10 borderPrimary">
                            <p class="size14 str500">Need More Document?</p>
                            <a href="#" class="nav pnav tnav" id="addBtn"><i class="fas fa-plus inline"></i> Add Additional Document</a>
                        </div>
                    </div>
                    <br>
                    <div class="height0 justifyStart">
                        <input type="checkbox" class="width0 gap10" required> &nbsp;
                        <p class="size12">I confirm that I am still a resident of Barangay Valdefuente</p>
                    </div>
                    <div class="height0 justifyStart">
                        <input type="checkbox" class="width0 gap10" required> &nbsp;
                        <p class="size12">I hereby agree to the <a href="" class="inline height0 width0">terms and conditions</a></p>
                    </div>
                    <div class="field height0 marginTop15 width100 alignEnd">
                        <button type="submit" class="nav tnav pnav"><i class="fas fa-check-circle"></i>Submit</button>
                    </div>
                </form>
            </div>
        </div>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
        document.querySelectorAll(".showBtn").forEach(button => {
            button.addEventListener("click", function(event) {
                event.preventDefault(); // Prevent default <a> behavior
    
                let newsCard = this.closest(".newsCard"); // Get parent newsCard
                let details = newsCard.querySelector(".details"); // Get details inside the card
                let icon = this.querySelector("i"); // Get icon inside the button
    
                details.classList.toggle("show"); // Toggle visibility
                
                // Toggle icon class
                if (details.classList.contains("show")) {
                    icon.classList.remove("fa-chevron-down");
                    icon.classList.add("fa-chevron-up");
                } else {
                    icon.classList.remove("fa-chevron-up");
                    icon.classList.add("fa-chevron-down");
                }
            });
        });
    });
    
    </script>
    <script>
document.addEventListener("DOMContentLoaded", function () {
    // Select ALL elements with the class "univ"
    const univInputs = document.querySelectorAll(".univ");
    const newsCards = document.querySelectorAll(".newsCard");
    const notFoundMessage = document.getElementById("notFound");

    function handleFilter(event) {
        // Get the value from the input the user is currently typing in
        const filter = event.target.value.toLowerCase();
        let found = false;

        // If the search field is empty, show all cards and hide "NOT FOUND"
        if (filter === "") {
            newsCards.forEach(card => card.style.display = "block");
            notFoundMessage.style.display = "none";
            return;
        }

        // Hide cards that don't match the filter and show matching ones
        newsCards.forEach(card => {
            if (card.textContent.toLowerCase().includes(filter)) {
                card.style.display = "block";
                found = true;
            } else {
                card.style.display = "none";
            }
        });

        // Show "NOT FOUND" if no matches are found
        notFoundMessage.style.display = found ? "none" : "block";
    }

    // Attach the same filter function to both inputs
    univInputs.forEach(univInput => {
        univInput.addEventListener("input", handleFilter);
    });
});
    </script>
<script>
    document.querySelectorAll('.details').forEach(div => {
    div.innerHTML = div.innerHTML.replace(/(?<!\S)(https?:\/\/[^\s]+|www\.[^\s]+|\b[a-zA-Z0-9.-]+\.(com|net|org|gov|edu|ph)\b)(?!\S)/g, '<a href="http://$1" target="_blank" class="inline blue str500">$1</a>');
});
</script>
<script>
    document.querySelectorAll('.details').forEach(div => {
    div.innerHTML = div.innerHTML.replace(/(^|\s)(#\w+)/g, '$1<span class="green str500">$2</span>');
});
</script>
<script>
document.getElementById("assignBtn").addEventListener("click", function(event) {
    event.preventDefault(); // Prevent default link behavior
    
    let assignCard = document.getElementById("assignDepCard");
    let assignBtn = document.getElementById("assignBtn");

    // Toggle 'active' class
    assignCard.classList.toggle("active");

    // Change button text & icon based on active state
    if (assignCard.classList.contains("active")) {
        assignBtn.innerHTML = '<i class="fas fa-plus"></i>Request Document';
    } else {
        assignBtn.innerHTML = '<i class="fas fa-plus"></i>Request Document';
    }
});

// Hide #assignDepCard when #closeNav is clicked
document.getElementById("closeNav").addEventListener("click", function() {
    let assignCard = document.getElementById("assignDepCard");
    let assignBtn = document.getElementById("assignBtn");

    // Remove 'active' class
    assignCard.classList.remove("active");

    // Reset button text & icon
    assignBtn.innerHTML = '<i class="fas fa-plus"></i>Request Document';
});
</script>

</body>
</html>